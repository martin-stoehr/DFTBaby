#!/usr/bin/env python
"""
Create a polar two center grid on which the Slater-Koster integrals are
calculated. Since generating the grid takes a long time we store and reuse it.
"""
import numpy
from numpy import linspace, exp, log, pi
import os.path
import pprint
import sys
from .PolarTwoCenterGrid import ptcgrid

# grid for integration
rmin, rmax, Nr = 0.000000001, 10.0, 500#500
# number of angular grid points
Na = 150
# interatomic distance
dmin, dmax, Nd = 0.0, 10.0, 250#150
#
angles = linspace(0.0, pi, Na)
r = linspace(max(1.0e-10, rmin), rmax, Nr)
#r = exp(linspace(log(rmin), log(rmax), Nr))
d = linspace(dmin, dmax, Nd)

##################### DO NOT MESS WITH THE CODE BELOW ################################

# create polar two center grid
grid = ptcgrid(d/2.0,r,angles)

script_dir = os.path.dirname(os.path.realpath(__file__))
slako_dir = os.path.join(script_dir, "slako_tables/")

fh = open(os.path.join(slako_dir, "double_polar_grid.py"), "w")
numpy.set_printoptions(threshold=sys.maxsize)
pp = pprint.PrettyPrinter(depth=10)
print("from numpy import load, array", file=fh)
print("import os.path", file=fh)
print("# This file was automatically generated by %s" % sys.argv[0], file=fh)
print("# It loads the double polar grid from a binary file grid.npz that can be used", file=fh)
print("# for integrating overlaps and hamiltonian matrix elements.", file=fh)
print("# separation between centers", file=fh)
print("d = \\\n%s" % pp.pformat(d), file=fh)

# write grid to separate .npz file
grids = [Xk for Xk in grid[0]] + [Yk for Yk in grid[1]] + [area_k for area_k in grid[2]]
grid_file = os.path.join(slako_dir, "grid.npz")
grfh = open(grid_file, "wb")
numpy.savez(grfh, *grids)
grfh.close()

print("# load grid from grid.npz", file=fh)
print("_npz_file = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'grid.npz')", file=fh)
print("_npz = load(open(_npz_file, 'rb'))", file=fh)
print("_gr = [_npz[\"arr_%i\" % i] for i in range(0, len(_npz.keys()))]", file=fh)
print("# grid", file=fh)
print("# (X,Y,areas) = grid[0][k], grid[1][k], grid[2][k]   gives the x and y-positions", file=fh)
print("# of the centers and areas of the quads for a grid with distance d[k] between the centers.", file=fh)
print("grid = _gr[:len(d)], _gr[len(d):2*len(d)], _gr[2*len(d):3*len(d)]", file=fh)

fh.close()
